/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Veterinaria;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kevin
 */
public class Modificar extends javax.swing.JFrame {

    TipoAtencion ConsultaVeterinario;
    TipoAtencion Control;
    TipoAtencion Desparasitacion;
    TipoAtencion Vacunacion;
    TipoAtencion GuarderiaSoloPorDia;
    TipoAtencion Radiologia;
    TipoAtencion Baño;
    boolean v1, v2, v3, v4, v5;
    String Fecha, TipoCita, Hora;
    int cedulaDue, filaSeleccionada;

    /**
     * Creates new form Modificar
     */
    public Modificar() {

        ConsultaVeterinario = new TipoAtencion("Consulta Veterinario", 60000, 60);
        Control = new TipoAtencion("Control", 10000, 30);
        Desparasitacion = new TipoAtencion("Desparasitacion", 40000, 30);
        Vacunacion = new TipoAtencion("Vacunacion", 35000, 30);
        GuarderiaSoloPorDia = new TipoAtencion("Guarderia solo por dia", 35000, 1440);
        Radiologia = new TipoAtencion("Radiologia", 100000, 60);
        Baño = new TipoAtencion("Baño", 25000, 120);
        initComponents();
        DefaultTableModel model = (DefaultTableModel) tablaCita.getModel();
        String direccionCitas = "C:\\user";
        File f = new File(direccionCitas);
        String ruta = "C:\\user"; //Carpeta ruta
        String nombreArchivo = "ArchivoCitas.txt"; //Nombre archivo
        File ArchivoCitas = new File(ruta, nombreArchivo);
        if (!ArchivoCitas.exists()) {
            JOptionPane.showMessageDialog(null, "No hay citas aun");
        } else {

            try ( Scanner sc = new Scanner(ArchivoCitas)) {
                model.setRowCount(0);
                while (sc.hasNextLine()) {

                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    String CodigoA = data[0];
                    String FechaA = data[1];
                    String HoraA = data[2];
                    TipoCita = data[3];
                    String NombreMas = data[4];
                    String Cedula = data[5];

                    if ("Consulta Veterinario".equals(TipoCita) || "Radiologia".equals(TipoCita)) {
                        sc.nextLine();
                    }
                    model.addRow(new Object[]{CodigoA, FechaA, HoraA, TipoCita, NombreMas, Cedula});

                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        }
    }

//    private void save(DefaultTableModel modelTotal) {
//        String direccionClientes = "C:\\user";
//        File f = new File(direccionClientes);
//        String ruta = "C:\\user"; //Carpeta ruta
//        String nombreArchivo = "GestionVeterinaria.txt"; //Nombre archivo
//        File archivoClientes = new File(ruta, nombreArchivo);
//        if (!archivoClientes.exists()) { //No existe el archivo
//            f.mkdir();
//            try {
//                archivoClientes.createNewFile();
//            } catch (IOException ex) {
//                System.out.println("Error");
//            }
//        }
//        try ( FileWriter fw = new FileWriter(archivoClientes.getAbsoluteFile(), true)) {
//            BufferedWriter bw = new BufferedWriter(fw);
    //casting
//            System.out.println("aaa" + modelTotal.getRowCount());
//          
//            while (i < modelTotal.getRowCount()) {
//                int cedulaP = Integer.valueOf(String.valueOf(modelTotal.getValueAt(i, 0)));
//                nombreP = String.valueOf(modelTotal.getValueAt(i, 1));
//                razaP = String.valueOf(modelTotal.getValueAt(i, 2));
//                colorP = String.valueOf(modelTotal.getValueAt(i, 3));
//                String fechaNacimientoP = String.valueOf(modelTotal.getValueAt(i, 4));
//                bw.write(cedulaP + "," + nombreP + "," + razaP + "," + colorP + "," + fechaNacimientoP);
//                bw.newLine();
//                i++;
//            }
//            bw.flush();
//            bw.close();
//            fw.close();
//        } catch (IOException e) {
//            System.out.println("Error al crear archivo");
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameReg = new javax.swing.JFrame();
        textoCed = new javax.swing.JLabel();
        textoAlerta = new javax.swing.JLabel();
        cedulaDueno = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        textoAlerta1 = new javax.swing.JLabel();
        NombreM = new javax.swing.JTextField();
        confirmar = new javax.swing.JButton();
        Crear = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        textoNac1 = new javax.swing.JLabel();
        textoCed1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        textoAlerta2 = new javax.swing.JLabel();
        textoNac = new javax.swing.JLabel();
        textoAlerta3 = new javax.swing.JLabel();
        DiaCita = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCita = new javax.swing.JTable();

        textoCed.setText("Cédula:");

        textoAlerta.setForeground(new java.awt.Color(255, 51, 51));
        textoAlerta.setText("¡La cédula debe ser de números!");

        cedulaDueno.setText("Digite su cédula");
        cedulaDueno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cedulaDuenoMouseClicked(evt);
            }
        });
        cedulaDueno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cedulaDuenoActionPerformed(evt);
            }
        });

        jLabel1.setText("Ingrese el nombre del paciente");

        textoAlerta1.setForeground(new java.awt.Color(255, 51, 51));
        textoAlerta1.setText("Debe ingresar un nombre");

        confirmar.setText("Confirmar");
        confirmar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmarMouseClicked(evt);
            }
        });
        confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarActionPerformed(evt);
            }
        });

        Crear.setText("Actualizar");
        Crear.setEnabled(false);
        Crear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearMouseClicked(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consulta Veterinario", "Control", "Desparasitacion", "Vacunacion", "Guarderia solo por dia", "Radiologia", "Baño" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        textoNac1.setText("Atencion necesitada");

        textoCed1.setText("Seleccione la hora de la cita");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30" }));

        textoAlerta2.setForeground(new java.awt.Color(255, 51, 51));
        textoAlerta2.setText("La hora se encuentra ocupada");

        textoNac.setText("Indique la fecha cita");

        textoAlerta3.setForeground(new java.awt.Color(255, 51, 51));
        textoAlerta3.setText("No se olvide de colocar la fecha ");

        javax.swing.GroupLayout frameRegLayout = new javax.swing.GroupLayout(frameReg.getContentPane());
        frameReg.getContentPane().setLayout(frameRegLayout);
        frameRegLayout.setHorizontalGroup(
            frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameRegLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoCed1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(frameRegLayout.createSequentialGroup()
                        .addComponent(cedulaDueno, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 173, Short.MAX_VALUE))
                    .addGroup(frameRegLayout.createSequentialGroup()
                        .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frameRegLayout.createSequentialGroup()
                                .addComponent(textoCed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textoAlerta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confirmar))
                            .addGroup(frameRegLayout.createSequentialGroup()
                                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(frameRegLayout.createSequentialGroup()
                                        .addComponent(textoNac)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textoAlerta3))
                                    .addGroup(frameRegLayout.createSequentialGroup()
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textoAlerta2))
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textoNac1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NombreM, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(frameRegLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textoAlerta1))
                                    .addComponent(DiaCita, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Crear)))
                        .addContainerGap())))
        );
        frameRegLayout.setVerticalGroup(
            frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameRegLayout.createSequentialGroup()
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameRegLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoCed)
                            .addComponent(textoAlerta))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRegLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(confirmar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(cedulaDueno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textoAlerta1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NombreM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoNac1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(textoCed1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoAlerta2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoNac)
                    .addComponent(textoAlerta3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DiaCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frameRegLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(Crear)))
                .addGap(27, 27, 27))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaCita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Fecha", "Hora", "Tipo cita", "Nombre", "Cedula"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCita);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitaMouseClicked
        //tablaCita.setVisible(false);

        filaSeleccionada = tablaCita.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablaCita.getModel();
        textoAlerta.setVisible(false);
        textoAlerta1.setVisible(false);
        textoAlerta2.setVisible(false);
        textoAlerta3.setVisible(false);
        cedulaDueno.setText(String.valueOf(model.getValueAt(filaSeleccionada, 5)));
        NombreM.setText(String.valueOf(model.getValueAt(filaSeleccionada, 4)));
        jComboBox1.setSelectedItem(String.valueOf(model.getValueAt(filaSeleccionada, 3)));
        jComboBox2.setSelectedItem(String.valueOf(model.getValueAt(filaSeleccionada, 2)));
        try {
            Date date1 = new SimpleDateFormat("dd/MM/yyyy").parse(String.valueOf(model.getValueAt(filaSeleccionada, 1)));
            DiaCita.setDate(date1);
        } catch (ParseException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        frameReg.setVisible(true);
        frameReg.setSize(400, 400);

        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaCitaMouseClicked

    private void cedulaDuenoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cedulaDuenoMouseClicked
        cedulaDueno.setText("");
    }//GEN-LAST:event_cedulaDuenoMouseClicked

    private void cedulaDuenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cedulaDuenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cedulaDuenoActionPerformed

    private void confirmarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmarMouseClicked
        int diaactual = (DiaCita.getCalendar().get(Calendar.DAY_OF_WEEK) - 1);

        String LineB = "";
        Crear.setEnabled(false);
        v5 = true;
        v1 = true;
        v2 = true;
        v3 = true;
        v4 = true;
        if (diaactual == 6 || diaactual == 7) {
            v5 = false;
            JOptionPane.showMessageDialog(null, "En este dia de la semana no se puede pedir cita, cv");
        }
        textoAlerta.setVisible(false);
        textoAlerta1.setVisible(false);
        textoAlerta2.setVisible(false);
        textoAlerta3.setVisible(false);
        Hora = jComboBox2.getSelectedItem().toString();
        TipoCita = jComboBox1.getSelectedItem().toString();
        if ((TipoCita.equals(GuarderiaSoloPorDia.Nombre) || TipoCita.equals(Baño.Nombre))) {
            try {
                cedulaDue = Integer.valueOf(cedulaDueno.getText());
            } catch (java.lang.NumberFormatException x) {
                textoAlerta.setVisible(true);
                v1 = !true;
            }
            if ("".equals(NombreM.getText())) {
                textoAlerta1.setVisible(true);
                v1 = !true;
            }
            try {
                String dia = Integer.toString(DiaCita.getCalendar().get(Calendar.DAY_OF_MONTH));
                String mes = Integer.toString(DiaCita.getCalendar().get(Calendar.MONTH) + 1);
                String year = Integer.toString(DiaCita.getCalendar().get(Calendar.YEAR));
                Fecha = dia + "/" + mes + "/" + year;

            } catch (java.lang.NullPointerException e) {
                textoAlerta3.setVisible(true);
                v1 = !true;
            }
            String direccionArchivoGestion = "C:\\user";
            File fAG = new File(direccionArchivoGestion);
            String rutaAG = "C:\\user"; //Carpeta ruta
            String nombreArchivoAG = "GestionVeterinaria.txt"; //Nombre archivo
            File GestionVeterinaria = new File(rutaAG, nombreArchivoAG);
            if (!GestionVeterinaria.exists()) {
                v1 = !true;
                System.out.println("No hay clientes inscritos");
            } else {
                try ( Scanner sc = new Scanner(GestionVeterinaria)) {
                    v3 = !true;
                    v4 = !true;
                    while (sc.hasNextLine()) {
                        String linea = sc.nextLine();
                        String data[] = linea.split(",");
                        String CedulaA = data[0];
                        String NombreMA = data[1];
                        String RazaA = data[2];
                        String ColorA = data[3];
                        String FechaNacimientoA = data[4];
                        if (Integer.valueOf(CedulaA) == cedulaDue) {
                            v3 = true;
                            if (NombreMA.equals(NombreM.getText())) {
                                v4 = true;
                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                }
                if (!v3) {
                    JOptionPane.showMessageDialog(null, "Apreciado Cliente, no se ecnuentra registrado");
                }
                if (!v4) {
                    JOptionPane.showMessageDialog(null, "Esta Mascota no se encuentra registrada");
                }
            }
        } else {
            try {
                cedulaDue = Integer.valueOf(cedulaDueno.getText());
            } catch (java.lang.NumberFormatException x) {
                textoAlerta.setVisible(true);
                v1 = !true;
            }
            if ("".equals(NombreM.getText())) {
                textoAlerta1.setVisible(true);
                v1 = !true;
            }
            try {
                String dia = Integer.toString(DiaCita.getCalendar().get(Calendar.DAY_OF_MONTH));
                String mes = Integer.toString(DiaCita.getCalendar().get(Calendar.MONTH) + 1);
                String year = Integer.toString(DiaCita.getCalendar().get(Calendar.YEAR));
                Fecha = dia + "/" + mes + "/" + year;

            } catch (java.lang.NullPointerException e) {
                textoAlerta3.setVisible(true);
                v1 = !true;
            }
            String direccionArchivoGestion = "C:\\user";
            File fAG = new File(direccionArchivoGestion);
            String rutaAG = "C:\\user"; //Carpeta ruta
            String nombreArchivoAG = "GestionVeterinaria.txt"; //Nombre archivo
            File GestionVeterinaria = new File(rutaAG, nombreArchivoAG);
            if (!GestionVeterinaria.exists()) {
                v1 = !true;
                System.out.println("No hay clientes inscritos");
            } else {
                try ( Scanner sc = new Scanner(GestionVeterinaria)) {
                    v3 = !true;
                    v4 = !true;
                    while (sc.hasNextLine()) {
                        String linea = sc.nextLine();
                        String data[] = linea.split(",");
                        String CedulaA = data[0];
                        String NombreMA = data[1];
                        String RazaA = data[2];
                        String ColorA = data[3];
                        String FechaNacimientoA = data[4];
                        if (Integer.valueOf(CedulaA) == cedulaDue) {
                            v3 = true;
                            if (NombreMA.equals(NombreM.getText())) {
                                v4 = true;
                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                }
                if (!v3) {
                    System.out.println("Apreciado Cliente, no se ecnuentra registrado");
                }
                if (!v4) {
                    System.out.println("Esta Mascota no se encuentra registrada");
                }
            }

        }

        System.out.println(v1);
        System.out.println(v2);
        Crear.setEnabled(v1 && v2 && v3 && v4 && v5);
        confirmar.setEnabled(!(v1 && v2 && v3 && v4 && v5));

        // TODO add your handling code here:
    }//GEN-LAST:event_confirmarMouseClicked

    private void confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmarActionPerformed

    @SuppressWarnings("empty-statement")
    private void CrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearMouseClicked
        DefaultTableModel model = (DefaultTableModel) tablaCita.getModel();
        String CodigoA = String.valueOf(model.getValueAt(filaSeleccionada, 0));
        //model.removeRow(filaSeleccionada);
        String dia = Integer.toString(DiaCita.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mes = Integer.toString(DiaCita.getCalendar().get(Calendar.MONTH) + 1);
        String year = Integer.toString(DiaCita.getCalendar().get(Calendar.YEAR));
        String FechaA = dia + "/" + mes + "/" + year;
        String hora = jComboBox2.getSelectedItem().toString();;
        String tipoCita = jComboBox1.getSelectedItem().toString();;
        String NombreMas = NombreM.getText();
        String Cedula = cedulaDueno.getText();
        //model.addRow(new Object[]{CodigoA, FechaA, hora, tipoCita, NombreMas, Cedula});
        model.setValueAt(CodigoA, filaSeleccionada, 0);
        model.setValueAt(FechaA, filaSeleccionada, 1);
        model.setValueAt(hora, filaSeleccionada, 2);
        model.setValueAt(tipoCita, filaSeleccionada, 3);
        model.setValueAt(NombreMas, filaSeleccionada, 4);
        model.setValueAt(Cedula, filaSeleccionada, 5);
        save(model);
        this.setVisible(true);
        frameReg.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_CrearMouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed
    private void save(DefaultTableModel model) {
        String sDir = "C:\\user";
        File f = new File(sDir);
        String ruta = "C:\\user"; //Carpeta ruta
        String nombreArchivo = "ArchivoCitas.txt"; //Nombre archivo
        File archivoClientes = new File(ruta, nombreArchivo);
        String sDira = "C:\\user";
        File fa = new File(sDira);
        String rutaa = "C:\\user"; //Carpeta ruta
        String nombreArchivoa = "AgendaVet.txt"; //Nombre archivo
        File archivoAgenda = new File(rutaa, nombreArchivoa);
        

        try ( FileWriter fw = new FileWriter(archivoClientes.getAbsoluteFile())) {
            BufferedWriter bw = new BufferedWriter(fw);
            for (int i = 0; i < model.getRowCount(); i++) {
                //casting 
                String CodigoA = String.valueOf(model.getValueAt(i, 0));
                String FechaA = String.valueOf(model.getValueAt(i, 1));
                String hora = String.valueOf(model.getValueAt(i, 2));
                String tipoCita = String.valueOf(model.getValueAt(i, 3));
                String NombreMas = String.valueOf(model.getValueAt(i, 4));
                String Cedula = String.valueOf(model.getValueAt(i, 5));

                if (tipoCita.equals("Guarderia solo por dia")) {
                    bw.write(CodigoA + "," + FechaA + "," + "Todo el dia" + "," + tipoCita + "," + NombreMas + "," + Cedula);
                } else if (tipoCita.equals("Baño")) {
                    String Hora2 = "";
                    if (hora.contains(":00")) {
                        Hora2 = Integer.parseInt(hora.substring(0, 2)) + 2 + ":00";
                    } else if (hora.contains(":30")) {
                        int HoraAux = Integer.parseInt(hora.substring(0, 2)) + 2;
                        if (Integer.valueOf(hora.substring(0, 2)) > 9) {
                            Hora2 = HoraAux + ":30";
                        } else {
                            Hora2 = "0" + HoraAux + ":30";
                        }
                    }
                    bw.write(CodigoA + "," + FechaA + "," + hora + "-" + Hora2 + "," + tipoCita + "," + NombreMas + "," + Cedula);
                } else {
                    bw.write(CodigoA + "," + FechaA + "," + hora + "," + tipoCita + "," + NombreMas + "," + Cedula);
                    if (tipoCita.equals("Consulta Veterinario") || tipoCita.equals("Radiologia")) {
                        bw.newLine();
                        String Hora2 = "";
                        if (Hora.contains(":00")) {
                            Hora2 = Hora.substring(0, 3) + "30";
                        } else if (Hora.contains(":30")) {
                            int HoraAux = Integer.parseInt(Hora.substring(0, 2)) + 1;

                            if (Integer.valueOf(Hora.substring(0, 2)) > 9) {
                                Hora2 = HoraAux + ":00";
                            } else {
                                Hora2 = "0" + HoraAux + ":00";
                            }
                        }
                        bw.write(CodigoA + "," + FechaA + "," + Hora2 + "," + tipoCita + "," + NombreMas + "," + Cedula);
                    }
                }
                bw.newLine();
            }
            bw.flush();
            bw.close();
            fw.close();
        } catch (IOException e) {
            System.out.println("Error al crear archivo");
        }

        try {
            Scanner sc = new Scanner(archivoClientes);
            try ( FileWriter fwa = new FileWriter(archivoAgenda.getAbsoluteFile())) {
                try ( BufferedWriter bwa = new BufferedWriter(fwa)) {
                    fwa.write("");
                    
                    while (sc.hasNextLine()) {
                        String linea = sc.nextLine();
                        System.out.println(linea);
                        String data[] = linea.split(",");
                        String Codigo = data[0];
                        String FechaA = data[1];
                        String HoraA = data[2];
                        String TipoCita = data[3];
                        String NombreMas = data[4];
                        String Cedu = data[5];
                        if (!(TipoCita.equals("Guarderia solo por dia") || TipoCita.equals("Baño"))) {
                            String LineB = FechaA + "," + HoraA + "," + TipoCita;
                            bwa.write(LineB);
                            System.out.println(LineB);
                            bwa.newLine();

                        }
                    }
                    bwa.flush();
                    bwa.close();
                    fwa.close();
                } catch (Exception e) {
                    System.out.println(e);
                }
            } catch (IOException e) {
                System.out.println("Error al crear archivo");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Modificar.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrganizarArchivoVet(archivoAgenda);

    }

    private void OrganizarArchivoVet(File Archivo) {
        String LineB = "";

        ArrayList<cita> fechas = new ArrayList<cita>();
        try ( Scanner sc = new Scanner(Archivo)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(",");
                String FechaA = data[0];
                String HoraA = data[1];
                String TipoCitaA = data[2];
                fechas.add(new cita(FechaA, HoraA, TipoCitaA));
            }
            try ( PrintWriter pw = new PrintWriter(Archivo)) {
                pw.write("");
            }
            Collections.sort(fechas, (cita lhs, cita rhs) -> {
                if (lhs.getFecha().getTime() < rhs.getFecha().getTime()) {
                    return -1;
                } else if (lhs.getFecha().getTime() == rhs.getFecha().getTime()) {
                    return 0;
                } else {
                    return 1;
                }
            }
            );
        } catch (Exception e) {
            System.out.println("El archivo no se encontró");
        }
        try ( FileWriter fw = new FileWriter(Archivo.getAbsoluteFile(), true)) {
            BufferedWriter bw = new BufferedWriter(fw);
            for (cita fecha : fechas) {
                String LineA = fecha.Fecha + "," + fecha.Hora + "," + fecha.TipoCita;
                bw.write(LineA);
                bw.newLine();
                bw.flush();
            }
            bw.close();
            fw.close();
        } catch (IOException e) {
            System.out.println("Error al crear archivo");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modificar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modificar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modificar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modificar.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modificar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Crear;
    private com.toedter.calendar.JDateChooser DiaCita;
    private javax.swing.JTextField NombreM;
    private javax.swing.JTextField cedulaDueno;
    private javax.swing.JButton confirmar;
    private javax.swing.JFrame frameReg;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCita;
    private javax.swing.JLabel textoAlerta;
    private javax.swing.JLabel textoAlerta1;
    private javax.swing.JLabel textoAlerta2;
    private javax.swing.JLabel textoAlerta3;
    private javax.swing.JLabel textoCed;
    private javax.swing.JLabel textoCed1;
    private javax.swing.JLabel textoNac;
    private javax.swing.JLabel textoNac1;
    // End of variables declaration//GEN-END:variables
}
