/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Veterinaria;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kevin
 */
public class Eliminar extends javax.swing.JFrame {

    /**
     * Creates new form Eliminar
     */
    TipoAtencion Baño;
    boolean v1, v2, v3, v4, v5;
    String Fecha, TipoCita, Hora;
    int cedulaDue, filaSeleccionada;

    public Eliminar() {
        initComponents();

        DefaultTableModel model = (DefaultTableModel) tablaCita.getModel();
        String direccionCitas = "C:\\user";
        File f = new File(direccionCitas);
        String ruta = "C:\\user"; //Carpeta ruta
        String nombreArchivo = "ArchivoCitas.txt"; //Nombre archivo
        File ArchivoCitas = new File(ruta, nombreArchivo);
        if (!ArchivoCitas.exists()) {
            JOptionPane.showMessageDialog(null, "No hay citas aun");
        } else {

            try ( Scanner sc = new Scanner(ArchivoCitas)) {
                model.setRowCount(0);
                while (sc.hasNextLine()) {

                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    String CodigoA = data[0];
                    String FechaA = data[1];
                    String HoraA = data[2];
                    String TipoCita = data[3];
                    String NombreMas = data[4];
                    String Cedula = data[5];

                    if ("Consulta Veterinario".equals(TipoCita) || "Radiologia".equals(TipoCita)) {
                        sc.nextLine();
                    }
                    model.addRow(new Object[]{CodigoA, FechaA, HoraA, TipoCita, NombreMas, Cedula});

                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCita = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaCita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Fecha", "Hora", "Tipo cita", "Nombre", "Cedula"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCita);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitaMouseClicked
        //tablaCita.setVisible(false);

        filaSeleccionada = tablaCita.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablaCita.getModel();
                if ((filaSeleccionada+1) < tablaCita.getRowCount()){
        String tipoCita = String.valueOf(model.getValueAt(filaSeleccionada + 1, 3));
        if (tipoCita.equals("Consulta Veterinario") || tipoCita.equals("Radiologia")) {
            model.removeRow(filaSeleccionada);

        }}
                model.removeRow(filaSeleccionada);

     
        save(model);
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaCitaMouseClicked
    private void save(DefaultTableModel model) {
        String sDir = "C:\\user";
        File f = new File(sDir);
        String ruta = "C:\\user"; //Carpeta ruta
        String nombreArchivo = "ArchivoCitas.txt"; //Nombre archivo
        File archivoClientes = new File(ruta, nombreArchivo);
        String sDira = "C:\\user";
        File fa = new File(sDira);
        String rutaa = "C:\\user"; //Carpeta ruta
        String nombreArchivoa = "AgendaVet.txt"; //Nombre archivo
        File archivoAgenda = new File(rutaa, nombreArchivoa);

        try ( FileWriter fw = new FileWriter(archivoClientes.getAbsoluteFile())) {
            BufferedWriter bw = new BufferedWriter(fw);
            fw.write("");

            for (int i = 0; i < model.getRowCount(); i++) {
                //casting 
                String CodigoA = String.valueOf(model.getValueAt(i, 0));
                String FechaA = String.valueOf(model.getValueAt(i, 1));
                String hora = String.valueOf(model.getValueAt(i, 2));
                String tipoCita = String.valueOf(model.getValueAt(i, 3));
                String NombreMas = String.valueOf(model.getValueAt(i, 4));
                String Cedula = String.valueOf(model.getValueAt(i, 5));
                bw.write(CodigoA + "," + FechaA + "," + hora + "," + tipoCita + "," + NombreMas + "," + Cedula);
                bw.newLine();
            }
            bw.flush();
            bw.close();
            fw.close();
        } catch (IOException e) {
            System.out.println("Error al crear archivo1");
        }
        try {
            Scanner sc = new Scanner(archivoClientes);
            try ( FileWriter fwa = new FileWriter(archivoAgenda.getAbsoluteFile())) {
                try ( BufferedWriter bwa = new BufferedWriter(fwa)) {
                    fwa.write("");

                    while (sc.hasNextLine()) {
                        String linea = sc.nextLine();
                        System.out.println(linea);
                        String data[] = linea.split(",");
                        String Codigo = data[0];
                        String FechaA = data[1];
                        String HoraA = data[2];
                        String TipoCita = data[3];
                        String NombreMas = data[4];
                        String Cedu = data[5];
                        if (!(TipoCita.equals("Guarderia solo por dia") || TipoCita.equals("Baño"))) {
                            String LineB = FechaA + "," + HoraA + "," + TipoCita;
                            bwa.write(LineB);
                            System.out.println(LineB);
                            bwa.newLine();

                        }
                    }
                    bwa.flush();
                    bwa.close();
                    fwa.close();
                } catch (Exception e) {
                    System.out.println(e);
                }
            } catch (IOException e) {
                System.out.println("Error al crear archivo2");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Modificar.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrganizarArchivoVet(archivoAgenda);
    }

    private void OrganizarArchivoVet(File Archivo) {
        String LineB = "";

        ArrayList<cita> fechas = new ArrayList<cita>();
        try ( Scanner sc = new Scanner(Archivo)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(",");
                String FechaA = data[0];
                String HoraA = data[1];
                String TipoCitaA = data[2];
                fechas.add(new cita(FechaA, HoraA, TipoCitaA));
            }
            try ( PrintWriter pw = new PrintWriter(Archivo)) {
                pw.write("");
            }
            Collections.sort(fechas, (cita lhs, cita rhs) -> {
                if (lhs.getFecha().getTime() < rhs.getFecha().getTime()) {
                    return -1;
                } else if (lhs.getFecha().getTime() == rhs.getFecha().getTime()) {
                    return 0;
                } else {
                    return 1;
                }
            }
            );
        } catch (Exception e) {
            System.out.println("El archivo no se encontró3");
        }
        try ( FileWriter fw = new FileWriter(Archivo.getAbsoluteFile(), true)) {
            BufferedWriter bw = new BufferedWriter(fw);
            for (cita fecha : fechas) {
                String LineA = fecha.Fecha + "," + fecha.Hora + "," + fecha.TipoCita;
                bw.write(LineA);
                bw.newLine();
                bw.flush();
            }
            bw.close();
            fw.close();
        } catch (IOException e) {
            System.out.println("Error al crear archivo4");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Eliminar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCita;
    // End of variables declaration//GEN-END:variables
}
